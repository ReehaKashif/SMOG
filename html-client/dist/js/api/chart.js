// let leftChartCtx = document.getElementById("chartLeftCanva").getContext("2d");
// let rightChartCtx = document.getElementById("chartRightCanva").getContext("2d");
let predictionChartCtx = document
.getElementById("predictionChart")
.getContext("2d");
let greeneryChartCtx = document.getElementById("greeneryChart").getContext("2d");

let leftChart, rightChart, predictionChart, greeneryChart;

$(document).ready(function () {
  // Initial function call when the page loads
  handleHistoricalParamsChange();
  handleForecastDistrictChange();
  handleSmogCausesDistrictChange();

  // Attach event listeners to select inputs
  $("#district-selector").change(function () {
    handleHistoricalParamsChange();
    handleForecastDistrictChange();
  });

  $("#duration-selector").change(function () {
    handleHistoricalParamsChange();
    handleForecastDistrictChange();
  });

  $("#predition-district-selector").change(function () {
    handleSmogCausesDistrictChange();
  });
  
  $("#greenery-district-selector").change(function () {
    handleGreeneryDistrictChange();
  });
});

const getHistoricalData = (district) => {
  return fetch(`${SERVER_URL}/historical_data?district=${district}`)
    .then((response) => {
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      return response.json();
    })
    .then((data) => {
      return plotHistoricalGraph(data);
    })
    .catch((err) => {
      console.error("Fetch error:", { err });
      return null;
    });
};

const getForecastAqi = (district) => {
  return fetch(`${SERVER_URL}/forecast_data?district=${district}`)
    .then((response) => {
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      return response.json();
    })
    .then((data) => {
      plotPredictionGraph(data);
      return;
    })
    .catch((err) => {
      console.error("Fetch error:", err);
      return null;
    });
};

const getPredictionData = (district) => {
  const lastYearPromise = fetch(`${SERVER_URL}/last_year?district=${district}`);
  const thisYearPromise = fetch(`${SERVER_URL}/this_year?district=${district}`);
  // const thisYearPromise = fetch(`${SERVER_URL}/this_year?district=${district}`);

  return Promise.all([lastYearPromise, thisYearPromise])
    .then(([lastYearResponse, thisYearResponse]) => {
      if (!lastYearResponse.ok || !thisYearResponse.ok) {
        throw new Error("Network response was not ok");
      }
      return Promise.all([lastYearResponse.json(), thisYearResponse.json()]);
    })
    .then(([lastYearData, thisYearData]) => {
      plotSmogCausesChart({ ...lastYearData, ...thisYearData });
      return;
    })
    .catch((err) => {
      console.error("Fetch error:", err);
      return null;
    });
};

const getGreeneryData = (district) => {
  const data = {
  'Attock': {'2016_Q1': 31.43638155, '2016_Q2': 4.038132296, '2016_Q3': 26.8825896, '2016_Q4': 3.11817384, '2017_Q1': 19.8035856, '2017_Q2': 3.060655468, '2017_Q3': 38.37758269, '2017_Q4': 6.995746239, '2018_Q1': 34.29198866, '2018_Q2': 4.336691178, '2018_Q3': 38.58273067, '2018_Q4': 13.85848902, '2019_Q1': 39.44457268, '2019_Q2': 11.09730338, '2019_Q3': 38.07704695, '2019_Q4': 28.37189263, '2020_Q1': 34.81336731, '2020_Q2': 20.3312415, '2020_Q3': 50.51324411, '2020_Q4': 17.83978226, '2021_Q1': 29.67370211, '2021_Q2': 2.92044754, '2021_Q3': 21.77210548, '2021_Q4': 8.340910193, '2022_Q1': 13.71982924, '2022_Q2': 0.078240344, '2022_Q3': 7.818732475, '2022_Q4': 2.101909243, '2023_Q1': 12.01916876, '2023_Q2': 0.599696636, '2023_Q3': 4.888803833, '2023_Q4': 1.154350081, '2024_Q1': 13.31411382, '2024_Q2': 0.635897632, '2024_Q3': 11.49220169, '2024_Q4': null},
  'Bahawalnagar': {'2016_Q1': 61.50829213, '2016_Q2': 2.42356362, '2016_Q3': 53.79895428, '2016_Q4': 5.753784797, '2017_Q1': 60.97617524, '2017_Q2': 2.628418612, '2017_Q3': 54.28459688, '2017_Q4': 7.46012221, '2018_Q1': 61.16281243, '2018_Q2': 0.752667272, '2018_Q3': 48.47279279, '2018_Q4': 15.78765365, '2019_Q1': 61.35239252, '2019_Q2': 6.299310357, '2019_Q3': 53.64415814, '2019_Q4': 15.31900005, '2020_Q1': 65.08555134, '2020_Q2': 6.532328876, '2020_Q3': 56.82507115, '2020_Q4': 7.189360893, '2021_Q1': 64.85352916, '2021_Q2': 7.216282466, '2021_Q3': 50.35827031, '2021_Q4': 8.337781546, '2022_Q1': 53.26454822, '2022_Q2': 0.135321292, '2022_Q3': 29.43580294, '2022_Q4': 6.457947427, '2023_Q1': 46.69752952, '2023_Q2': 1.698064838, '2023_Q3': 31.60601122, '2023_Q4': 0.253726706, '2024_Q1': 56.06817667, '2024_Q2': 0.613318701, '2024_Q3': 36.82814026, '2024_Q4': null},
  'Bahawalpur': {'2016_Q1': 19.53111891, '2016_Q2': 1.917215982, '2016_Q3': 17.38830108, '2016_Q4': 3.816053135, '2017_Q1': 18.85076049, '2017_Q2': 2.441791784, '2017_Q3': 18.13398056, '2017_Q4': 4.477779825, '2018_Q1': 19.09879049, '2018_Q2': 0.667746716, '2018_Q3': 16.2364919, '2018_Q4': 5.379614782, '2019_Q1': 19.36832872, '2019_Q2': 2.825733159, '2019_Q3': 17.48801788, '2019_Q4': 6.03669092, '2020_Q1': 20.08401743, '2020_Q2': 3.772457459, '2020_Q3': 18.1847898, '2020_Q4': 3.808474263, '2021_Q1': 20.22593743, '2021_Q2': 3.507357882, '2021_Q3': 16.13668038, '2021_Q4': 3.543973334, '2022_Q1': 15.98104453, '2022_Q2': 0.129845908, '2022_Q3': 8.652739052, '2022_Q4': 3.251111504, '2023_Q1': 11.7048794, '2023_Q2': 0.955254192, '2023_Q3': 8.109532534, '2023_Q4': 0.155164062, '2024_Q1': 18.3167912, '2024_Q2': 0.553309222, '2024_Q3': 13.60718558, '2024_Q4': null},
  'Bhakar': {'2016_Q1': 31.64524211, '2016_Q2': 6.727520789, '2016_Q3': 19.57708637, '2016_Q4': 5.267220638, '2017_Q1': 34.67451967, '2017_Q2': 3.33328973, '2017_Q3': 13.66137301, '2017_Q4': 11.5158841, '2018_Q1': 34.52829505, '2018_Q2': 2.689117649, '2018_Q3': 7.764804823, '2018_Q4': 10.02470517, '2019_Q1': 47.20921563, '2019_Q2': 6.796558246, '2019_Q3': 16.96993765, '2019_Q4': 15.54142615, '2020_Q1': 52.32750882, '2020_Q2': 7.81087714, '2020_Q3': 16.31751696, '2020_Q4': 12.20707882, '2021_Q1': 32.36451856, '2021_Q2': 5.375791942, '2021_Q3': 12.31973437, '2021_Q4': 7.8279749, '2022_Q1': 20.07935199, '2022_Q2': 0.157931278, '2022_Q3': 5.083413954, '2022_Q4': 3.04506655, '2023_Q1': 24.59234904, '2023_Q2': 1.535811872, '2023_Q3': 4.720606967, '2023_Q4': 1.307347214, '2024_Q1': 24.50536358, '2024_Q2': 0.99847527, '2024_Q3': 6.782526732, '2024_Q4': null},
  'Chakwal': {'2016_Q1': 28.32218469, '2016_Q2': 2.437609609, '2016_Q3': 36.09409487, '2016_Q4': 6.266861362, '2017_Q1': 15.93714655, '2017_Q2': 2.296559565, '2017_Q3': 45.66697702, '2017_Q4': 6.849971377, '2018_Q1': 26.27954237, '2018_Q2': 2.829838671, '2018_Q3': 37.60672407, '2018_Q4': 6.4506659, '2019_Q1': 25.11204573, '2019_Q2': 3.059545727, '2019_Q3': 38.97569244, '2019_Q4': 9.120917068, '2020_Q1': 20.67962206, '2020_Q2': 3.640783142, '2020_Q3': 44.8014709, '2020_Q4': 5.407476221, '2021_Q1': 14.17655188, '2021_Q2': 1.77781012, '2021_Q3': 34.56903141, '2021_Q4': 7.946305522, '2022_Q1': 14.21048249, '2022_Q2': 0.028134307, '2022_Q3': 32.47041135, '2022_Q4': 5.351601105, '2023_Q1': 15.1416884, '2023_Q2': 0.712106406, '2023_Q3': 35.80329063, '2023_Q4': 3.241098569, '2024_Q1': 20.70907936, '2024_Q2': 0.332883895, '2024_Q3': 32.4103648, '2024_Q4': null},
  'Chiniot': {'2016_Q1': 57.59340641, '2016_Q2': 16.92145031, '2016_Q3': 55.81496108, '2016_Q4': 31.82299212, '2017_Q1': 68.35167826, '2017_Q2': 20.43938771, '2017_Q3': 61.86556052, '2017_Q4': 36.75458217, '2018_Q1': 65.50551096, '2018_Q2': 13.95534532, '2018_Q3': 54.88507158, '2018_Q4': 39.20157706, '2019_Q1': 66.09023412, '2019_Q2': 30.80706704, '2019_Q3': 61.9400984, '2019_Q4': 44.16836591, '2020_Q1': 67.38604256, '2020_Q2': 40.25381561, '2020_Q3': 71.89985171, '2020_Q4': 40.96034718, '2021_Q1': 64.72817107, '2021_Q2': 29.86989608, '2021_Q3': 73.00832561, '2021_Q4': 29.79318441, '2022_Q1': 43.70895496, '2022_Q2': 1.135679306, '2022_Q3': 43.84670088, '2022_Q4': 24.18717654, '2023_Q1': 46.14229837, '2023_Q2': 9.779963856, '2023_Q3': 34.82923104, '2023_Q4': 4.045384559, '2024_Q1': 48.59920177, '2024_Q2': 4.6470419, '2024_Q3': 44.27455814, '2024_Q4': null},
  'D G Khan': {'2016_Q1': 24.69235716, '2016_Q2': 0.488709912, '2016_Q3': 18.15772817, '2016_Q4': 9.234673152, '2017_Q1': 28.01537762, '2017_Q2': 1.461951136, '2017_Q3': 17.69028229, '2017_Q4': 9.235800918, '2018_Q1': 28.65321889, '2018_Q2': 0.940124496, '2018_Q3': 14.55941194, '2018_Q4': 5.457207578, '2019_Q1': 29.86850993, '2019_Q2': 2.826872037, '2019_Q3': 24.17772295, '2019_Q4': 10.58134926, '2020_Q1': 30.11206018, '2020_Q2': 5.628685158, '2020_Q3': 22.04514709, '2020_Q4': 8.600968237, '2021_Q1': 28.98785451, '2021_Q2': 2.236721164, '2021_Q3': 17.34053233, '2021_Q4': 5.876664198, '2022_Q1': 20.39950469, '2022_Q2': 0.040872313, '2022_Q3': 7.860294242, '2022_Q4': 1.259025278, '2023_Q1': 21.4507105, '2023_Q2': 0.376820039, '2023_Q3': 7.034537169, '2023_Q4': 0.612265069, '2024_Q1': 25.27088019, '2024_Q2': 0.314153213, '2024_Q3': 9.524155753, '2024_Q4': null},
  'Faisalabad': {'2016_Q1': 67.67055821, '2016_Q2': 14.02481181, '2016_Q3': 60.15238782, '2016_Q4': 26.59674086, '2017_Q1': 64.41554979, '2017_Q2': 14.93592767, '2017_Q3': 53.37113537, '2017_Q4': 28.8610358, '2018_Q1': 68.46011756, '2018_Q2': 5.621020921, '2018_Q3': 50.05715565, '2018_Q4': 33.13827825, '2019_Q1': 71.8169103, '2019_Q2': 24.71250514, '2019_Q3': 54.57958911, '2019_Q4': 40.61580713, '2020_Q1': 72.87623524, '2020_Q2': 30.59438191, '2020_Q3': 68.11000842, '2020_Q4': 28.86945288, '2021_Q1': 70.61957073, '2021_Q2': 20.87149827, '2021_Q3': 59.69576032, '2021_Q4': 27.60173089, '2022_Q1': 47.45049345, '2022_Q2': 0.476307856, '2022_Q3': 25.87732662, '2022_Q4': 18.3149265, '2023_Q1': 47.62995167, '2023_Q2': 4.137222648, '2023_Q3': 19.47838742, '2023_Q4': 1.567305715, '2024_Q1': 55.05717963, '2024_Q2': 1.127125168, '2024_Q3': 27.88496431, '2024_Q4': null},
  'Gujranwala': {'2016_Q1': 83.17807652, '2016_Q2': 5.731825318, '2016_Q3': 83.86906916, '2016_Q4': 10.70570234, '2017_Q1': 85.13958909, '2017_Q2': 6.979862694, '2017_Q3': 85.05629085, '2017_Q4': 13.67943678, '2018_Q1': 82.85355156, '2018_Q2': 4.661437364, '2018_Q3': 86.18770682, '2018_Q4': 22.34680843, '2019_Q1': 85.51977305, '2019_Q2': 12.46272727, '2019_Q3': 85.99471817, '2019_Q4': 21.89642629, '2020_Q1': 83.60540801, '2020_Q2': 22.02939541, '2020_Q3': 85.69422459, '2020_Q4': 12.82977561, '2021_Q1': 81.60092541, '2021_Q2': 10.16634228, '2021_Q3': 84.8307342, '2021_Q4': 7.775443271, '2022_Q1': 71.85084631, '2022_Q2': 0.093201684, '2022_Q3': 65.72051915, '2022_Q4': 6.184945364, '2023_Q1': 72.80919881, '2023_Q2': 2.559316064, '2023_Q3': 69.02846441, '2023_Q4': 2.551253275, '2024_Q1': 73.60277136, '2024_Q2': 0.507343066, '2024_Q3': 69.02591469, '2024_Q4': null},
  'Gujrat': {'2016_Q1': 58.88989723, '2016_Q2': 5.1387718, '2016_Q3': 63.21016553, '2016_Q4': 11.8878286, '2017_Q1': 56.23826968, '2017_Q2': 6.621365438, '2017_Q3': 63.67631324, '2017_Q4': 13.96063329, '2018_Q1': 61.43568122, '2018_Q2': 5.817785801, '2018_Q3': 68.5861911, '2018_Q4': 17.31778542, '2019_Q1': 66.16103777, '2019_Q2': 15.51534863, '2019_Q3': 77.43845557, '2019_Q4': 36.62705841, '2020_Q1': 66.95318709, '2020_Q2': 27.17375579, '2020_Q3': 68.40683192, '2020_Q4': 18.20140269, '2021_Q1': 65.97401767, '2021_Q2': 12.97373346, '2021_Q3': 65.35663445, '2021_Q4': 22.8090411, '2022_Q1': 40.58310053, '2022_Q2': 0.065005779, '2022_Q3': 34.49134455, '2022_Q4': 7.07176859, '2023_Q1': 40.0745524, '2023_Q2': 3.57861175, '2023_Q3': 27.24325941, '2023_Q4': 4.41104222, '2024_Q1': 38.38650218, '2024_Q2': 0.364326906, '2024_Q3': 41.09112663, '2024_Q4': null},
  'Hafizabad': {'2016_Q1': 74.60237255, '2016_Q2': 3.249361682, '2016_Q3': 79.50449449, '2016_Q4': 13.77554374, '2017_Q1': 84.54881669, '2017_Q2': 3.482029571, '2017_Q3': 83.94156404, '2017_Q4': 14.85949864, '2018_Q1': 83.77304175, '2018_Q2': 2.597483226, '2018_Q3': 83.92877235, '2018_Q4': 16.0746833, '2019_Q1': 85.56255554, '2019_Q2': 10.40456486, '2019_Q3': 86.26708392, '2019_Q4': 17.42172112, '2020_Q1': 83.58920811, '2020_Q2': 14.27210547, '2020_Q3': 86.87947497, '2020_Q4': 13.53278015, '2021_Q1': 84.41294389, '2021_Q2': 6.266957103, '2021_Q3': 86.95252452, '2021_Q4': 8.93680298, '2022_Q1': 77.157964, '2022_Q2': 0.100255142, '2022_Q3': 68.4190542, '2022_Q4': 6.63171833, '2023_Q1': 79.05424942, '2023_Q2': 1.010350094, '2023_Q3': 64.67463505, '2023_Q4': 1.991145576, '2024_Q1': 79.48944697, '2024_Q2': 0.223716616, '2024_Q3': 69.3767522, '2024_Q4': null},
  'Jhang': {'2016_Q1': 60.30736081, '2016_Q2': 10.28318307, '2016_Q3': 49.47327138, '2016_Q4': 20.70480003, '2017_Q1': 61.37211461, '2017_Q2': 9.67403056, '2017_Q3': 52.79588268, '2017_Q4': 22.90869996, '2018_Q1': 63.52661248, '2018_Q2': 5.637914388, '2018_Q3': 45.79630556, '2018_Q4': 24.21220023, '2019_Q1': 65.557375, '2019_Q2': 14.093528, '2019_Q3': 52.67594352, '2019_Q4': 28.31978089, '2020_Q1': 72.79234601, '2020_Q2': 17.63489481, '2020_Q3': 58.09441207, '2020_Q4': 22.16354645, '2021_Q1': 61.87814107, '2021_Q2': 13.23624018, '2021_Q3': 57.87770564, '2021_Q4': 17.71129507, '2022_Q1': 46.35158166, '2022_Q2': 0.580010894, '2022_Q3': 33.03214618, '2022_Q4': 9.629052826, '2023_Q1': 48.95644307, '2023_Q2': 2.138030864, '2023_Q3': 28.0074611, '2023_Q4': 0.394682312, '2024_Q1': 50.70632903, '2024_Q2': 2.180720189, '2024_Q3': 33.97369381, '2024_Q4': null},
  'Jhelum': {'2016_Q1': 26.74032696, '2016_Q2': 2.462062017, '2016_Q3': 50.05259178, '2016_Q4': 6.645309909, '2017_Q1': 13.67828447, '2017_Q2': 2.961653269, '2017_Q3': 54.59979345, '2017_Q4': 5.984812234, '2018_Q1': 24.34073092, '2018_Q2': 2.613426376, '2018_Q3': 39.18501216, '2018_Q4': 11.41484425, '2019_Q1': 29.07524065, '2019_Q2': 10.22765463, '2019_Q3': 54.45536336, '2019_Q4': 27.25030864, '2020_Q1': 27.73007842, '2020_Q2': 23.80428489, '2020_Q3': 60.4976219, '2020_Q4': 14.82751167, '2021_Q1': 26.32617533, '2021_Q2': 4.007277873, '2021_Q3': 45.70942594, '2021_Q4': 20.98814885, '2022_Q1': 14.23499228, '2022_Q2': 0.111243518, '2022_Q3': 26.60338348, '2022_Q4': 2.754812215, '2023_Q1': 11.76350598, '2023_Q2': 1.765387886, '2023_Q3': 10.28661959, '2023_Q4': 2.615261876, '2024_Q1': 13.05384437, '2024_Q2': 0.556130071, '2024_Q3': 28.66094743, '2024_Q4': null},
  'Kasur': {'2016_Q1': 61.61712069, '2016_Q2': 13.74706098, '2016_Q3': 70.04813903, '2016_Q4': 25.01986064, '2017_Q1': 66.43833624, '2017_Q2': 19.695763, '2017_Q3': 69.00839981, '2017_Q4': 34.78938534, '2018_Q1': 67.27925854, '2018_Q2': 17.46005713, '2018_Q3': 68.65483624, '2018_Q4': 36.9968656, '2019_Q1': 67.61951521, '2019_Q2': 33.08493273, '2019_Q3': 70.21734145, '2019_Q4': 41.6711641, '2020_Q1': 68.33805471, '2020_Q2': 38.24873248, '2020_Q3': 75.69841119, '2020_Q4': 38.23674132, '2021_Q1': 67.06492723, '2021_Q2': 29.05112339, '2021_Q3': 73.34366121, '2021_Q4': 32.88227487, '2022_Q1': 46.40764583, '2022_Q2': 1.095730598, '2022_Q3': 40.16949806, '2022_Q4': 19.63931229, '2023_Q1': 41.32723102, '2023_Q2': 17.17959402, '2023_Q3': 35.72070076, '2023_Q4': 8.643737601, '2024_Q1': 50.01647302, '2024_Q2': 11.12431126, '2024_Q3': 42.59265607, '2024_Q4': null},
  'Khanewal': {'2016_Q1': 81.42589716, '2016_Q2': 11.875999, '2016_Q3': 72.52570729, '2016_Q4': 14.41361198, '2017_Q1': 80.38576638, '2017_Q2': 10.12011849, '2017_Q3': 75.54408973, '2017_Q4': 15.38308531, '2018_Q1': 81.94263479, '2018_Q2': 3.845574662, '2018_Q3': 72.40466243, '2018_Q4': 22.24548499, '2019_Q1': 80.9406003, '2019_Q2': 17.55176548, '2019_Q3': 75.44584976, '2019_Q4': 25.36063268, '2020_Q1': 79.91264803, '2020_Q2': 22.05637468, '2020_Q3': 75.37351466, '2020_Q4': 16.65112309, '2021_Q1': 79.33657514, '2021_Q2': 17.33071078, '2021_Q3': 68.36347674, '2021_Q4': 8.474332705, '2022_Q1': 62.33822755, '2022_Q2': 0.558353075, '2022_Q3': 27.8146676, '2022_Q4': 10.68790052, '2023_Q1': 56.04221869, '2023_Q2': 7.060630531, '2023_Q3': 29.77215779, '2023_Q4': 0.064530545, '2024_Q1': 64.17911747, '2024_Q2': 3.48191779, '2024_Q3': 36.35954505, '2024_Q4': null},
  'Khushab': {'2016_Q1': 26.68322513, '2016_Q2': 3.20747315, '2016_Q3': 33.9025506, '2016_Q4': 10.06708631, '2017_Q1': 30.48719815, '2017_Q2': 2.427619096, '2017_Q3': 34.43616908, '2017_Q4': 12.56457494, '2018_Q1': 28.88371962, '2018_Q2': 1.596422953, '2018_Q3': 20.62593342, '2018_Q4': 15.69195354, '2019_Q1': 46.70935009, '2019_Q2': 8.556922676, '2019_Q3': 29.63602747, '2019_Q4': 24.57271385, '2020_Q1': 38.97749807, '2020_Q2': 13.11956428, '2020_Q3': 37.45909466, '2020_Q4': 22.25262248, '2021_Q1': 27.11755059, '2021_Q2': 4.70787697, '2021_Q3': 30.60145061, '2021_Q4': 11.76130949, '2022_Q1': 15.96851954, '2022_Q2': 0.058330187, '2022_Q3': 10.68774617, '2022_Q4': 4.494431553, '2023_Q1': 15.739348, '2023_Q2': 1.044271915, '2023_Q3': 3.428075456, '2023_Q4': 1.747287581, '2024_Q1': 15.96338389, '2024_Q2': 0.232106497, '2024_Q3': 9.47856088, '2024_Q4': null},
  'Lahore': {'2016_Q1': 48.52802943, '2016_Q2': 6.764687045, '2016_Q3': 48.05614406, '2016_Q4': 11.39284145, '2017_Q1': 52.7357775, '2017_Q2': 11.49366401, '2017_Q3': 46.91143742, '2017_Q4': 18.60865423, '2018_Q1': 49.39087612, '2018_Q2': 8.043167993, '2018_Q3': 46.44231201, '2018_Q4': 21.81446689, '2019_Q1': 53.68819284, '2019_Q2': 19.55316352, '2019_Q3': 45.1862295, '2019_Q4': 26.17912216, '2020_Q1': 53.13882162, '2020_Q2': 21.45180426, '2020_Q3': 51.81006802, '2020_Q4': 21.47759682, '2021_Q1': 48.00973127, '2021_Q2': 16.5608029, '2021_Q3': 49.92690072, '2021_Q4': 13.97503291, '2022_Q1': 36.55910317, '2022_Q2': 0.207957444, '2022_Q3': 16.6378194, '2022_Q4': 6.3584225, '2023_Q1': 33.74332747, '2023_Q2': 3.877914442, '2023_Q3': 17.6605627, '2023_Q4': 3.23194398, '2024_Q1': 35.70499718, '2024_Q2': 1.418427711, '2024_Q3': 19.90345511, '2024_Q4': null},
  'Layyah': {'2016_Q1': 49.98865236, '2016_Q2': 3.176398631, '2016_Q3': 31.81065525, '2016_Q4': 7.801591295, '2017_Q1': 50.02739497, '2017_Q2': 4.732078291, '2017_Q3': 30.74197675, '2017_Q4': 14.17244389, '2018_Q1': 52.92924839, '2018_Q2': 3.942707461, '2018_Q3': 21.56717498, '2018_Q4': 10.4850986, '2019_Q1': 53.53973282, '2019_Q2': 9.858392907, '2019_Q3': 34.96931852, '2019_Q4': 18.31273578, '2020_Q1': 64.74316997, '2020_Q2': 13.02081293, '2020_Q3': 30.12017709, '2020_Q4': 15.04176992, '2021_Q1': 49.85681014, '2021_Q2': 9.038247024, '2021_Q3': 27.54555239, '2021_Q4': 8.792703007, '2022_Q1': 35.36296862, '2022_Q2': 0.193859553, '2022_Q3': 10.20384234, '2022_Q4': 3.160911235, '2023_Q1': 38.88602517, '2023_Q2': 2.076973415, '2023_Q3': 8.335308416, '2023_Q4': 0.460508487, '2024_Q1': 41.48820035, '2024_Q2': 1.309254346, '2024_Q3': 11.8814901, '2024_Q4': null},
  'Lodhran': {'2016_Q1': 82.90378929, '2016_Q2': 6.776291564, '2016_Q3': 76.2785312, '2016_Q4': 10.87108867, '2017_Q1': 83.5908071, '2017_Q2': 7.10414597, '2017_Q3': 84.34111572, '2017_Q4': 13.85764114, '2018_Q1': 85.30922692, '2018_Q2': 1.920760356, '2018_Q3': 82.45710035, '2018_Q4': 22.45202291, '2019_Q1': 82.64444708, '2019_Q2': 14.33368637, '2019_Q3': 82.5487654, '2019_Q4': 21.06888034, '2020_Q1': 79.22765292, '2020_Q2': 18.95864027, '2020_Q3': 81.80179392, '2020_Q4': 17.99351133, '2021_Q1': 79.88252073, '2021_Q2': 16.0173353, '2021_Q3': 70.65118424, '2021_Q4': 10.79948874, '2022_Q1': 65.68801486, '2022_Q2': 0.240895003, '2022_Q3': 46.7637208, '2022_Q4': 6.835292351, '2023_Q1': 59.03144565, '2023_Q2': 3.529941064, '2023_Q3': 35.56646462, '2023_Q4': 0.592339411, '2024_Q1': 69.489864, '2024_Q2': 1.161664364, '2024_Q3': 44.72020758, '2024_Q4': null},
  'Mandi Bahauldin': {'2016_Q1': 76.79941414, '2016_Q2': 12.22160921, '2016_Q3': 77.36774074, '2016_Q4': 29.83857294, '2017_Q1': 75.93312727, '2017_Q2': 12.79783597, '2017_Q3': 77.12835753, '2017_Q4': 26.45268193, '2018_Q1': 79.23522627, '2018_Q2': 10.97600922, '2018_Q3': 80.36874828, '2018_Q4': 27.25233628, '2019_Q1': 83.1611944, '2019_Q2': 24.79626738, '2019_Q3': 83.54781019, '2019_Q4': 35.70590407, '2020_Q1': 81.61437883, '2020_Q2': 32.52085807, '2020_Q3': 83.37049207, '2020_Q4': 32.28962194, '2021_Q1': 81.45173722, '2021_Q2': 20.91272622, '2021_Q3': 81.53089297, '2021_Q4': 23.41258301, '2022_Q1': 63.43562975, '2022_Q2': 0.71169525, '2022_Q3': 49.42253464, '2022_Q4': 12.69270753, '2023_Q1': 64.92232444, '2023_Q2': 6.876045562, '2023_Q3': 33.97782832, '2023_Q4': 8.947838131, '2024_Q1': 61.29169379, '2024_Q2': 1.709934769, '2024_Q3': 48.16591587, '2024_Q4': null},
  'Okara': {'2016_Q1': 66.98456146, '2016_Q2': 20.64779992, '2016_Q3': 76.3092688, '2016_Q4': 26.23548755, '2017_Q1': 66.67491912, '2017_Q2': 23.51889303, '2017_Q3': 71.11961779, '2017_Q4': 33.56457708, '2018_Q1': 67.82428301, '2018_Q2': 18.46520131, '2018_Q3': 69.80696208, '2018_Q4': 40.12946187, '2019_Q1': 62.44079609, '2019_Q2': 38.53167384, '2019_Q3': 73.86132658, '2019_Q4': 38.33418287, '2020_Q1': 68.14450347, '2020_Q2': 44.09970945, '2020_Q3': 80.81693778, '2020_Q4': 29.17218475, '2021_Q1': 66.71771519, '2021_Q2': 32.61889239, '2021_Q3': 73.33401362, '2021_Q4': 27.09820429, '2022_Q1': 46.43508245, '2022_Q2': 0.735520222, '2022_Q3': 50.59146308, '2022_Q4': 23.08181915, '2023_Q1': 43.11283695, '2023_Q2': 17.48724122, '2023_Q3': 38.85166167, '2023_Q4': 7.580411555, '2024_Q1': 51.35040592, '2024_Q2': 13.15349141, '2024_Q3': 46.86049699, '2024_Q4': null}, 
  'Pakpattan': {'2016_Q1': 77.19133696, '2016_Q2': 22.97716472, '2016_Q3': 78.54735292, '2016_Q4': 17.12991159, '2017_Q1': 78.11679974, '2017_Q2': 21.87437556, '2017_Q3': 74.83806688, '2017_Q4': 18.96676508, '2018_Q1': 77.11812991, '2018_Q2': 11.48198431, '2018_Q3': 76.3773458, '2018_Q4': 28.89736737, '2019_Q1': 67.05754923, '2019_Q2': 38.96476124, '2019_Q3': 79.21411341, '2019_Q4': 35.05310495, '2020_Q1': 70.06579283, '2020_Q2': 43.85836709, '2020_Q3': 82.0067162, '2020_Q4': 14.1430972, '2021_Q1': 74.40397846, '2021_Q2': 34.50805409, '2021_Q3': 67.99823438, '2021_Q4': 18.36431471, '2022_Q1': 48.52307938, '2022_Q2': 0.563237989, '2022_Q3': 50.38033918, '2022_Q4': 16.06468813, '2023_Q1': 48.17577382, '2023_Q2': 13.42290003, '2023_Q3': 31.84357457, '2023_Q4': 1.85815386, '2024_Q1': 57.31540145, '2024_Q2': 10.07109224, '2024_Q3': 43.53442759, '2024_Q4': null}, 
  'Rahim Yar Khan': {'2016_Q1': 33.00853184, '2016_Q2': 13.97726857, '2016_Q3': 44.97194443, '2016_Q4': 23.94506459, '2017_Q1': 32.71212755, '2017_Q2': 15.28226086, '2017_Q3': 43.91793179, '2017_Q4': 23.64480242, '2018_Q1': 30.56034336, '2018_Q2': 6.79683169, '2018_Q3': 39.92731785, '2018_Q4': 18.36175593, '2019_Q1': 34.58886563, '2019_Q2': 15.55163217, '2019_Q3': 44.62984351, '2019_Q4': 23.28194284, '2020_Q1': 35.96605509, '2020_Q2': 19.29390233, '2020_Q3': 44.99889635, '2020_Q4': 18.35624456, '2021_Q1': 34.62220567, '2021_Q2': 18.33925949, '2021_Q3': 42.70574609, '2021_Q4': 16.6463688, '2022_Q1': 21.12051512, '2022_Q2': 1.011730934, '2022_Q3': 34.19154785, '2022_Q4': 6.187338498, '2023_Q1': 15.60832696, '2023_Q2': 7.790916675, '2023_Q3': 31.98578951, '2023_Q4': 0.261078137, '2024_Q1': 26.63604415, '2024_Q2': 3.049236446, '2024_Q3': 36.06199035, '2024_Q4': null}, 
  'Rajanpur': {'2016_Q1': 22.22387306, '2016_Q2': 1.910169994, '2016_Q3': 20.56829448, '2016_Q4': 4.189299237, '2017_Q1': 23.87403384, '2017_Q2': 3.086864743, '2017_Q3': 20.17051042, '2017_Q4': 5.939083111, '2018_Q1': 23.61130258, '2018_Q2': 1.303552797, '2018_Q3': 18.87127988, '2018_Q4': 4.89345223, '2019_Q1': 24.79607373, '2019_Q2': 3.490659701, '2019_Q3': 21.85830942, '2019_Q4': 7.59309183, '2020_Q1': 24.95400131, '2020_Q2': 5.690198256, '2020_Q3': 20.98956805, '2020_Q4': 7.857401285, '2021_Q1': 24.85420861, '2021_Q2': 5.100199717, '2021_Q3': 16.87045272, '2021_Q4': 7.356496786, '2022_Q1': 15.00328598, '2022_Q2': 0.121345098, '2022_Q3': 7.580015292, '2022_Q4': 2.586248617, '2023_Q1': 15.81602224, '2023_Q2': 2.101368382, '2023_Q3': 7.925215882, '2023_Q4': 1.254438606, '2024_Q1': 20.36295716, '2024_Q2': 0.76922084, '2024_Q3': 10.34806038, '2024_Q4': null}, 
  'Rawalpindi': {'2016_Q1': 47.54814251, '2016_Q2': 23.32115358, '2016_Q3': 65.27437858, '2016_Q4': 14.76293821, '2017_Q1': 38.15538637, '2017_Q2': 22.68107822, '2017_Q3': 70.96331434, '2017_Q4': 13.54692833, '2018_Q1': 54.41913113, '2018_Q2': 26.51219217, '2018_Q3': 67.9626653, '2018_Q4': 36.33081973, '2019_Q1': 53.23559106, '2019_Q2': 33.76408274, '2019_Q3': 67.54352667, '2019_Q4': 58.43005124, '2020_Q1': 52.6285817, '2020_Q2': 52.59027532, '2020_Q3': 73.08750964, '2020_Q4': 32.45009333, '2021_Q1': 48.76443172, '2021_Q2': 24.93674183, '2021_Q3': 60.53850222, '2021_Q4': 30.10669963, '2022_Q1': 21.29969121, '2022_Q2': 2.238964669, '2022_Q3': 34.68800459, '2022_Q4': 9.03932479, '2023_Q1': 19.81035025, '2023_Q2': 9.327860697, '2023_Q3': 31.13910017, '2023_Q4': 7.422701337, '2024_Q1': 15.7318966, '2024_Q2': 7.053849288, '2024_Q3': 44.12513058, '2024_Q4': null},
  'Mianwali': {'2016_Q1': 38.76329998, '2016_Q2': 3.738484984, '2016_Q3': 36.43826589, '2016_Q4': 5.844294604, '2017_Q1': 38.70611487, '2017_Q2': 2.348176694, '2017_Q3': 41.89894734, '2017_Q4': 9.641574439, '2018_Q1': 39.72500905, '2018_Q2': 1.830925446, '2018_Q3': 22.80284435, '2018_Q4': 10.4915695, '2019_Q1': 46.32325211, '2019_Q2': 6.075631031, '2019_Q3': 29.39317129, '2019_Q4': 17.32260699, '2020_Q1': 44.19859591, '2020_Q2': 7.781222039, '2020_Q3': 39.56929844, '2020_Q4': 16.99785943, '2021_Q1': 40.58583138, '2021_Q2': 4.284083698, '2021_Q3': 33.20187029, '2021_Q4': 8.293280942, '2022_Q1': 33.87368064, '2022_Q2': 0.184135454, '2022_Q3': 7.963716436, '2022_Q4': 3.143938503, '2023_Q1': 34.66941481, '2023_Q2': 0.714789379, '2023_Q3': 6.238081888, '2023_Q4': 1.182764936, '2024_Q1': 34.7831389, '2024_Q2': 0.607996218, '2024_Q3': 12.45220311, '2024_Q4': null},
  'Multan': {'2016_Q1': 75.26321725, '2016_Q2': 14.15100437, '2016_Q3': 63.64398546, '2016_Q4': 13.56730549, '2017_Q1': 74.31241236, '2017_Q2': 16.32560156, '2017_Q3': 68.67053173, '2017_Q4': 23.3694385, '2018_Q1': 75.53833108, '2018_Q2': 8.500578266, '2018_Q3': 61.73385817, '2018_Q4': 20.30601576, '2019_Q1': 75.00634431, '2019_Q2': 21.85214813, '2019_Q3': 68.10803985, '2019_Q4': 30.71222019, '2020_Q1': 73.79784853, '2020_Q2': 25.5257862, '2020_Q3': 67.53855238, '2020_Q4': 22.50164489, '2021_Q1': 72.53693062, '2021_Q2': 22.28264276, '2021_Q3': 60.69972693, '2021_Q4': 6.209184174, '2022_Q1': 53.12142898, '2022_Q2': 0.450104185, '2022_Q3': 33.51081233, '2022_Q4': 5.039351833, '2023_Q1': 52.56637185, '2023_Q2': 6.636290714, '2023_Q3': 23.16300721, '2023_Q4': 0.171335758, '2024_Q1': 58.49555283, '2024_Q2': 3.178959978, '2024_Q3': 36.43031625, '2024_Q4': null},
  'Muzaffargarh': {'2016_Q1': 53.12439361, '2016_Q2': 10.08944441, '2016_Q3': 50.73376247, '2016_Q4': 14.16882347, '2017_Q1': 56.60795678, '2017_Q2': 10.68882695, '2017_Q3': 51.00698765, '2017_Q4': 24.66570846, '2018_Q1': 55.96136958, '2018_Q2': 4.702376307, '2018_Q3': 41.80711356, '2018_Q4': 13.79431037, '2019_Q1': 59.41538088, '2019_Q2': 15.79265408, '2019_Q3': 50.8340174, '2019_Q4': 27.69646222, '2020_Q1': 60.39192824, '2020_Q2': 21.09777982, '2020_Q3': 49.30775251, '2020_Q4': 21.25629366, '2021_Q1': 57.24695749, '2021_Q2': 17.3361412, '2021_Q3': 45.94092966, '2021_Q4': 11.4372531, '2022_Q1': 37.32106514, '2022_Q2': 0.771066098, '2022_Q3': 25.75577493, '2022_Q4': 3.142843335, '2023_Q1': 39.50492356, '2023_Q2': 3.257640979, '2023_Q3': 20.62316372, '2023_Q4': 0.183494846, '2024_Q1': 48.01346134, '2024_Q2': 2.829263227, '2024_Q3': 25.04228776, '2024_Q4': null},
  'Nankana': {'2016_Q1': 76.2081552, '2016_Q2': 5.575809141, '2016_Q3': 75.14751314, '2016_Q4': 14.4093984, '2017_Q1': 82.13570357, '2017_Q2': 7.425045143, '2017_Q3': 73.68048325, '2017_Q4': 17.24942111, '2018_Q1': 82.92225336, '2018_Q2': 3.450508628, '2018_Q3': 73.2155538, '2018_Q4': 18.24279711, '2019_Q1': 85.49997633, '2019_Q2': 12.61683622, '2019_Q3': 76.45016371, '2019_Q4': 22.55971639, '2020_Q1': 86.00627263, '2020_Q2': 16.25116982, '2020_Q3': 83.41228754, '2020_Q4': 16.71662585, '2021_Q1': 85.16762642, '2021_Q2': 10.16361095, '2021_Q3': 78.76245158, '2021_Q4': 13.54432362, '2022_Q1': 73.01437017, '2022_Q2': 0.090062699, '2022_Q3': 55.16385336, '2022_Q4': 7.703281795, '2023_Q1': 72.65687027, '2023_Q2': 1.906074372, '2023_Q3': 53.18794357, '2023_Q4': 0.820609165, '2024_Q1': 76.45770503, '2024_Q2': 0.484417322, '2024_Q3': 62.9067077, '2024_Q4': null},
  'Narowal': {'2016_Q1': 79.97433962, '2016_Q2': 2.241797818, '2016_Q3': 85.86693324, '2016_Q4': 5.515815454, '2017_Q1': 86.2180763, '2017_Q2': 4.311132399, '2017_Q3': 84.18022001, '2017_Q4': 7.831771743, '2018_Q1': 89.20269889, '2018_Q2': 2.098396231, '2018_Q3': 89.17887769, '2018_Q4': 12.44314474, '2019_Q1': 89.53373778, '2019_Q2': 5.822955778, '2019_Q3': 84.30230928, '2019_Q4': 38.5108481, '2020_Q1': 85.57274305, '2020_Q2': 19.08689859, '2020_Q3': 84.14222, '2020_Q4': 8.945699065, '2021_Q1': 89.18565289, '2021_Q2': 7.162084228, '2021_Q3': 82.99692615, '2021_Q4': 9.927044722, '2022_Q1': 67.50289189, '2022_Q2': 0.020948985, '2022_Q3': 45.2238931, '2022_Q4': 4.045244706, '2023_Q1': 69.44154059, '2023_Q2': 1.395490282, '2023_Q3': 70.16365403, '2023_Q4': 2.497604324, '2024_Q1': 65.37247071, '2024_Q2': 0.328941344, '2024_Q3': 65.41046177, '2024_Q4': null},
  'Sahiwal': {'2016_Q1': 77.00482205, '2016_Q2': 25.65921881, '2016_Q3': 70.02080251, '2016_Q4': 24.07673315, '2017_Q1': 73.42662467, '2017_Q2': 20.42399616, '2017_Q3': 61.44314323, '2017_Q4': 23.02251392, '2018_Q1': 72.77003142, '2018_Q2': 10.43662101, '2018_Q3': 64.0937991, '2018_Q4': 31.95587092, '2019_Q1': 69.91354863, '2019_Q2': 32.58088139, '2019_Q3': 70.69975922, '2019_Q4': 36.83227124, '2020_Q1': 71.86326024, '2020_Q2': 38.63132023, '2020_Q3': 73.62267056, '2020_Q4': 20.5787619, '2021_Q1': 71.31369387, '2021_Q2': 26.59911902, '2021_Q3': 57.66658835, '2021_Q4': 15.94626443, '2022_Q1': 50.20230262, '2022_Q2': 0.768890412, '2022_Q3': 31.71705838, '2022_Q4': 17.79683909, '2023_Q1': 48.07083903, '2023_Q2': 12.17155111, '2023_Q3': 23.00332908, '2023_Q4': 0.434956248, '2024_Q1': 55.83036364, '2024_Q2': 6.397925621, '2024_Q3': 34.64117364, '2024_Q4': null},
  'Sargodha': {'2016_Q1': 70.10085714, '2016_Q2': 12.34282125, '2016_Q3': 54.37646147, '2016_Q4': 33.19067211, '2017_Q1': 69.85212678, '2017_Q2': 15.8158127, '2017_Q3': 57.2868479, '2017_Q4': 39.31860537, '2018_Q1': 72.62873823, '2018_Q2': 11.65834369, '2018_Q3': 44.12140185, '2018_Q4': 41.38272551, '2019_Q1': 75.80811562, '2019_Q2': 27.69554153, '2019_Q3': 49.55921343, '2019_Q4': 49.0558227, '2020_Q1': 76.11257958, '2020_Q2': 34.4228602, '2020_Q3': 64.73210364, '2020_Q4': 42.89187089, '2021_Q1': 72.19572543, '2021_Q2': 22.24753952, '2021_Q3': 57.70867865, '2021_Q4': 33.14264486, '2022_Q1': 51.50170743, '2022_Q2': 0.898537597, '2022_Q3': 24.02957492, '2022_Q4': 19.79355345, '2023_Q1': 52.11104315, '2023_Q2': 5.443479695, '2023_Q3': 17.9203434, '2023_Q4': 11.70807184, '2024_Q1': 51.16587038, '2024_Q2': 2.509601584, '2024_Q3': 25.68292079, '2024_Q4': null},
  'Sheikhupura': {'2016_Q1': 79.78848168, '2016_Q2': 4.051012, '2016_Q3': 80.79660923, '2016_Q4': 10.70664795, '2017_Q1': 83.66165914, '2017_Q2': 7.344974898, '2017_Q3': 80.37747072, '2017_Q4': 15.52047564, '2018_Q1': 81.86035057, '2018_Q2': 4.415279924, '2018_Q3': 77.49982348, '2018_Q4': 19.13423745, '2019_Q1': 83.80677255, '2019_Q2': 12.52584776, '2019_Q3': 80.6648145, '2019_Q4': 24.1833104, '2020_Q1': 83.33408544, '2020_Q2': 18.70258141, '2020_Q3': 83.96263796, '2020_Q4': 15.73395783, '2021_Q1': 81.62053194, '2021_Q2': 9.155511906, '2021_Q3': 81.28593647, '2021_Q4': 10.76542114, '2022_Q1': 70.21061291, '2022_Q2': 0.042021898, '2022_Q3': 54.48388885, '2022_Q4': 6.318147405, '2023_Q1': 71.40042736, '2023_Q2': 1.587264272, '2023_Q3': 61.30430625, '2023_Q4': 1.320284196, '2024_Q1': 70.12868387, '2024_Q2': 0.462302846, '2024_Q3': 60.75919064, '2024_Q4': null},
  'Sialkot': {'2016_Q1': 79.55028614, '2016_Q2': 6.114903798, '2016_Q3': 83.55264813, '2016_Q4': 12.88245214, '2017_Q1': 86.60152893, '2017_Q2': 9.490774724, '2017_Q3': 79.75289067, '2017_Q4': 14.61688677, '2018_Q1': 85.73191641, '2018_Q2': 5.824608669, '2018_Q3': 87.18532849, '2018_Q4': 20.40286207, '2019_Q1': 87.69659858, '2019_Q2': 12.39041467, '2019_Q3': 85.20895937, '2019_Q4': 40.32967903, '2020_Q1': 79.15409473, '2020_Q2': 27.3775755, '2020_Q3': 85.49571221, '2020_Q4': 16.12320817, '2021_Q1': 85.18873256, '2021_Q2': 11.77043761, '2021_Q3': 83.95244538, '2021_Q4': 12.89413351, '2022_Q1': 67.39762315, '2022_Q2': 0.280552004, '2022_Q3': 54.11048149, '2022_Q4': 7.989277737, '2023_Q1': 69.27989123, '2023_Q2': 5.469739112, '2023_Q3': 66.07483385, '2023_Q4': 4.251497628, '2024_Q1': 60.30224456, '2024_Q2': 1.023720228, '2024_Q3': 65.05205018, '2024_Q4': null},
  'Toba Tek Singh': {'2016_Q1': 75.55030998, '2016_Q2': 16.4617852, '2016_Q3': 64.82744693, '2016_Q4': 22.03697154, '2017_Q1': 68.83611617, '2017_Q2': 13.21681825, '2017_Q3': 59.92828304, '2017_Q4': 25.21832438, '2018_Q1': 73.81571476, '2018_Q2': 6.825974953, '2018_Q3': 57.60114887, '2018_Q4': 32.64461041, '2019_Q1': 73.17193167, '2019_Q2': 21.57700738, '2019_Q3': 63.33745191, '2019_Q4': 38.19993923, '2020_Q1': 76.19992715, '2020_Q2': 27.56530803, '2020_Q3': 69.05709779, '2020_Q4': 26.07442236, '2021_Q1': 73.40536464, '2021_Q2': 20.85636675, '2021_Q3': 60.36854285, '2021_Q4': 24.05490839, '2022_Q1': 51.34995439, '2022_Q2': 0.429413286, '2022_Q3': 31.92937492, '2022_Q4': 15.50867657, '2023_Q1': 50.11636514, '2023_Q2': 4.723259814, '2023_Q3': 28.39290636, '2023_Q4': 0.103213815, '2024_Q1': 56.78977812, '2024_Q2': 2.371051099, '2024_Q3': 37.80597858, '2024_Q4': null},  
  'Vehari': {'2016_Q1': 76.84650519, '2016_Q2': 17.09158455, '2016_Q3': 71.41721118, '2016_Q4': 18.48748695, '2017_Q1': 78.28025264, '2017_Q2': 15.30728325, '2017_Q3': 79.03767955, '2017_Q4': 21.58310186, '2018_Q1': 80.64214318, '2018_Q2': 5.900209657, '2018_Q3': 75.59217181, '2018_Q4': 26.01488881, '2019_Q1': 72.08088128, '2019_Q2': 30.24597004, '2019_Q3': 75.60381955, '2019_Q4': 31.86170061, '2020_Q1': 69.07361614, '2020_Q2': 32.05699261, '2020_Q3': 76.34680004, '2020_Q4': 22.58353736, '2021_Q1': 70.90270898, '2021_Q2': 25.76887142, '2021_Q3': 61.80152586, '2021_Q4': 16.79227909, '2022_Q1': 48.96098863, '2022_Q2': 0.551845389, '2022_Q3': 37.4984904, '2022_Q4': 13.52465706, '2023_Q1': 45.5929866, '2023_Q2': 8.312993462, '2023_Q3': 23.6665681, '2023_Q4': 0.164995226, '2024_Q1': 56.70395183, '2024_Q2': 3.94370725, '2024_Q3': 31.12432643, '2024_Q4': null},
  'Punjab': {'2016_Q1': 47.64609239, '2016_Q2': 7.755302352, '2016_Q3': 46.05268951, '2016_Q4': 12.69742004, '2017_Q1': 47.39796624, '2017_Q2': 8.259171091, '2017_Q3': 46.95305682, '2017_Q4': 15.46306473, '2018_Q1': 49.27103395, '2018_Q2': 5.164210504, '2018_Q3': 42.66949535, '2018_Q4': 17.59806983, '2019_Q1': 51.5839741, '2019_Q2': 13.71509385, '2019_Q3': 47.47792998, '2019_Q4': 24.1824389, '2020_Q1': 52.05833911, '2020_Q2': 18.65773705, '2020_Q3': 50.50942799, '2020_Q4': 17.19004267, '2021_Q1': 48.96999604, '2021_Q2': 12.0700672, '2021_Q3': 44.03848297, '2021_Q4': 13.21158828, '2022_Q1': 34.88032087, '2022_Q2': 0.396121961, '2022_Q3': 24.80068652, '2022_Q4': 7.170356687, '2023_Q1': 33.82830247, '2023_Q2': 3.914597474, '2023_Q3': 21.64814155, '2023_Q4': 1.886524832, '2024_Q1': 38.02339583, '2024_Q2': 2.091708773, '2024_Q3': 27.62903372, '2024_Q4': null}
  };

  plotGreeneryChart(data, district);
}

const handleHistoricalParamsChange = () => {
  // Get the values from the select inputs
  const district = $("#district-selector").val();
  // Call the function with the current values
  if (district) {
    getHistoricalData(district);
    // fetchAllHistoricalData(district);
  }
};

const handleForecastDistrictChange = () => {
  const district = $("#district-selector").val();
  if (district) {
    getForecastAqi(district);
  }
};

const handleSmogCausesDistrictChange = () => {
  const district = $("#predition-district-selector").val();
  if (district) {
    getPredictionData(district);
  }
};

const handleGreeneryDistrictChange = () => {
  const district = $("#greenery-district-selector").val();
  if (district) {
    getGreeneryData(district);
  }
};

const plotHistoricalGraph = (data) => {
  const dataFor7DaysBefore = data.forecast_7d.aqi;
  const dataFor14DaysBefore = data.forecast_14d.aqi;
  const dataFor2MonthsBefore = data.historical;
  const totalLength = dataFor2MonthsBefore.aqi.length;

  try {
    const datasets = [
      {
        label: "Actual",
        data: roundNullableData(dataFor2MonthsBefore.aqi),
        borderColor: "blue",
        fill: false,
      },
      {
        label: "14 days",
        data: roundNullableData(padList([...dataFor14DaysBefore], totalLength)),
        borderColor: "yellow",
        fill: false,
      },
      {
        label: "7 days",
        data: roundNullableData(padList([...dataFor7DaysBefore], totalLength)),
        borderColor: "green",
        fill: false,
      },
    ];

    if (leftChart) {
      leftChart.destroy();
    }

    // leftChart = new Chart(leftChartCtx, {
    //   type: "line",
    //   data: {
    //     labels: dataFor2MonthsBefore.date.map(convertDateFormat),
    //     datasets,
    //   },
    //   options: {
    //     responsive: true,
    //     scales: {
    //       y: {
    //         beginAtZero: false,
    //         min: 0,
    //         max: 500,
    //       },
    //     },
    //   },
    // });
  } catch (error) {
    console.log({ error });
  }
};

const plotPredictionGraph = (data) => {
  const { firstSection, secondSection, thirdSection } = divideArray(data.aqi);

  let groupedDatasets = [
    {
      label: "7 days",
      data: roundNullableData(firstSection),
      borderColor: "#06402b",
      fill: false,
    },
    {
      label: "Next 7 days",
      data: roundNullableData(secondSection),
      backgroundColor: "transparent",
      borderColor: "#008000",
      fill: false,
    },
    {
      label: "Next 45 days",
      data: roundNullableData(thirdSection),
      backgroundColor: "transparent",
      borderColor: "#90EE90",
      fill: false,
    },
  ];

  // if (rightChart) {
  //   rightChart.destroy();
  // }

  // rightChart = new Chart(rightChartCtx, {
  //   type: "line",
  //   data: {
  //     labels: data.date.map(convertDateFormat),
  //     datasets: groupedDatasets,
  //   },
  //   options: {
  //     responsive: true,
  //     // plugins: {
  //     // title: {
  //     //   display: true,
  //     //   text: (ctx) => "Prediction Data",
  //     // },
  //     // legend: {
  //     //   display: false,
  //     // },
  //     // },
  //     scales: {
  //       y: {
  //         beginAtZero: false,
  //         min: 0,
  //         max: 500,
  //       },
  //       x: {
  //         beginAtZero: false,
  //       },
  //     },
  //   },
  // });
};

const plotSmogCausesChart = (data) => {
  const last_year_next_two_months = data["last_year_data"]["next_two_months"];
  const last_year_past_two_months = data["last_year_data"]["past_two_months"];

  const this_year_next_two_months = data["this_year_data"]["next_two_months"];
  const this_year_past_two_months = data["this_year_data"]["past_two_months"];

  // Get the current date and generate the range of dates from two months ago to two months in the future
  const currentDate = new Date();
  const startDate = new Date(currentDate);
  startDate.setMonth(currentDate.getMonth() - 2);

  // const endDate = new Date(currentDate);
  const endDate = new Date('14-Dec-2024');
  endDate.setMonth(currentDate.getMonth() + 2);

  const dateRange = [];
  for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
    dateRange.push(new Date(d)); // Add 4-day steps
  }

  // Map AQI data for last year
  const lastYearData = dateRange.map((date) => {
    const formattedDate = convertDateFormat(date, false);
    const pastIndex = last_year_past_two_months.date.findIndex(
      (d) => convertDateFormat(d, false) === formattedDate
    );
    const nextIndex = last_year_next_two_months.date.findIndex(
      (d) => convertDateFormat(d, false) === formattedDate
    );

    if (pastIndex !== -1) {
      return last_year_past_two_months.aqi[pastIndex];
    } else if (nextIndex !== -1) {
      return last_year_next_two_months.aqi[nextIndex];
    } else {
      return null; // No data for this date
    }
  });

  // Map AQI data for this year
  const thisYearData = dateRange.map((date) => {
    const formattedDate = convertDateFormat(date, false);
    const pastIndex = this_year_past_two_months.date.findIndex(
      (d) => convertDateFormat(d, false) === formattedDate
    );
    const nextIndex = this_year_next_two_months.date.findIndex(
      (d) => convertDateFormat(d, false) === formattedDate
    );

    if (pastIndex !== -1) {
      return this_year_past_two_months.aqi[pastIndex];
    } else if (nextIndex !== -1) {
      return this_year_next_two_months.aqi[nextIndex];
    } else {
      return null; // No data for this date
    }
  });

  const skipped = (ctx, value) => ctx.p0.skip || ctx.p1.skip ? value : undefined;
  const down = (ctx, value) => ctx.p0.parsed.y > ctx.p1.parsed.y ? value : undefined;

  // Datasets for plotting
  const datasets = [
    {
      label: "Previous Year",
      data: lastYearData,
      backgroundColor: "#808080", // Gray color for last year
      borderColor: "#808080", // Gray color for last year
      fill: false,
      // pointStyle: 'circle',
      pointStyle: false,
      tension: 0.1,
      // pointRadius: 0,
    },
    {
      label: "Current Year",
      data: thisYearData,
      segment: {
        borderColor: function(context) {
          const index = context.p0DataIndex;
          const label = context.chart.data.labels[index];
          if (!label) return '#000000'; // Default color if label is undefined
  
          const currentDate = new Date(`${label}-2024`); // Assuming 2024 as the year
          const today = new Date();
          const diffInDays = (currentDate - today) / (1000 * 60 * 60 * 24);
  
          // Color logic based on date difference
          if (diffInDays <= 7 && diffInDays > 0) {
            return '#8B0000'; // Next 7 days
          } else if (diffInDays <= 14 && diffInDays > 7) {
            return '#ff0000'; // Next 14 days
          } else if (diffInDays > 14) {
            return '#FF7F7F'; // Beyond 14 days
          } else {
            return '#000000'; // Default for past dates
          }
        }
      },
      // backgroundColor: "#000000", // Black color for current year
      // borderColor: "#000000", // Black color for current year
      // segment: {
      //   borderColor: ctx => skipped(ctx, 'rgb(0,0,0,0.2)') || down(ctx, 'rgb(192,75,75)'),
      //   borderDash: ctx => skipped(ctx, [6, 6]),
      // },
      fill: false,
      pointStyle: false,
      tension: 0.1,
      spanGaps: true,
    },
    {
      label: "Next 7 days",
      data: roundNullableData(
        padListWithNull(
          this_year_next_two_months.aqi.slice(0, 7),
          last_year_past_two_months.date.length +
            last_year_next_two_months.date.length +
            this_year_past_two_months.date.length
        )
      ),
      backgroundColor: "#8B0000", // Dark red for future 7 days
      borderColor: "#8B0000", // Dark red for future 7 days
      fill: false,
      // pointStyle: false,
      tension: 0.1
      // pointRadius: 0,
    },
    {
      label: "Next 14 days",
      data: roundNullableData(
        padListWithNull(
          this_year_next_two_months.aqi.slice(7, 14),
          last_year_past_two_months.date.length +
            last_year_next_two_months.date.length +
            this_year_past_two_months.date.length +
            7
        )
      ),
      backgroundColor: "#ff0000", // Red for next 7 days
      borderColor: "#ff0000", // Red for next 7 days
      fill: false,
      // pointStyle: false,
      tension: 0.1
      // pointRadius: 0,
    },
    {
      label: "After 14 days",
      data: roundNullableData(
        padListWithNull(
          this_year_next_two_months.aqi.slice(14),
          last_year_past_two_months.date.length +
            last_year_next_two_months.date.length +
            this_year_past_two_months.date.length +
            14
        )
      ),
      backgroundColor: "#FF7F7F", // Light red for next 45 days
      borderColor: "#FF7F7F", // Light red for next 45 days
      fill: false,
      // pointStyle: false,
      tension: 0.1
      // pointRadius: 0,
    },
  ];

  // Destroy the previous chart if it exists
  if (predictionChart) {
    predictionChart.destroy();
  }

  // Create the chart
  predictionChart = new Chart(predictionChartCtx, {
    type: "line",
    data: {
      labels: dateRange.map((date) => convertDateFormat(date, false)), // Use the generated dateRange for the x-axis
      datasets: datasets, // Aligned data for both years
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        y: {
          beginAtZero: false,
          min: 0,
          max: 800,
        },
        x: {
          type: "category", // Category scale to ensure the dates are displayed correctly
          title: {
            display: true,
            text: "Date",
          },
        },
      },
      interaction: {
        intersect: true,
        mode: 'index',
      },
    },
  });
};

const plotGreeneryChart = (data, district) => {
  // Destroy the previous chart if it exists
  if (greeneryChart) {
    greeneryChart.destroy();
  }
  
  const years = Object.keys(data[district]);
  const values = Object.values(data[district]);

  // Create the chart
  greeneryChart = new Chart(greeneryChartCtx, {
    type: 'line',
    data: {
      labels: years,
      datasets: [{
        label: 'Percentage Cover',
        data: values,
        backgroundColor: '#70AD46',  // Bar fill color
        borderColor: '#70AD46',        // Bar border color
        borderWidth: 1,                               // Border width
        pointStyle: false
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true,  // Ensures the y-axis starts at 0
          title: {
            display: true,
            text: 'Percentage'  // Label for y-axis
          }
        },
        x: {
          title: {
            display: true,
            text: 'Year'  // Label for x-axis
          }
        }
      },
      responsive: true,
      plugins: {
        legend: {
          display: true,
          position: 'top', // Position of the legend
        },
        tooltip: {
          enabled: true,   // Enable tooltips on hover
        }
      }
    }
  });
  
}

/*
const plotSmogCausesChart = (data) => {
  const last_year_next_two_months = data["last_year_data"]["next_two_months"];
  const last_year_past_two_months = data["last_year_data"]["past_two_months"];

  const this_year_next_two_months = data["this_year_data"]["next_two_months"];
  const this_year_past_two_months = data["this_year_data"]["past_two_months"];

  // Generate labels with only day and month
  let labels = [
    ...last_year_past_two_months.date,
    ...last_year_next_two_months.date,
    ...this_year_past_two_months.date,
    ...this_year_next_two_months.date,
  ].map((dateStr) => convertDateFormat(dateStr, false));  // Keeping the same date format without year

  // Create datasets
  let datasets = [
    {
      label: "Last year",
      data: roundNullableData([
        ...last_year_past_two_months.aqi,
        ...last_year_next_two_months.aqi,
      ]),
      borderColor: "#808080",
      fill: false,
    },
    {
      label: "Current year last 2 months",
      data: roundNullableData(
        padListWithNull(
          this_year_past_two_months.aqi,
          last_year_past_two_months.date.length +
            last_year_next_two_months.date.length
        )
      ),
      borderColor: "#000000",
      fill: false,
    },
    {
      label: "Current year future 7 days",
      data: roundNullableData(
        padListWithNull(
          this_year_next_two_months.aqi.slice(0, 7),
          last_year_past_two_months.date.length +
            last_year_next_two_months.date.length +
            this_year_past_two_months.date.length
        )
      ),
      borderColor: "#8B0000",
      fill: false,
    },
    {
      label: "Current year next 7 days",
      data: roundNullableData(
        padListWithNull(
          this_year_next_two_months.aqi.slice(7, 14),
          last_year_past_two_months.date.length +
            last_year_next_two_months.date.length +
            this_year_past_two_months.date.length +
            7
        )
      ),
      borderColor: "#ff0000",
      fill: false,
    },
    {
      label: "Current year next 45 days",
      data: roundNullableData(
        padListWithNull(
          this_year_next_two_months.aqi.slice(14),
          last_year_past_two_months.date.length +
            last_year_next_two_months.date.length +
            this_year_past_two_months.date.length +
            14
        )
      ),
      borderColor: "#FF7F7F",
      fill: false,
    },
  ];

  // Destroy the previous chart if it exists
  if (predictionChart) {
    predictionChart.destroy();
  }

  // Create the new chart
  predictionChart = new Chart(predictionChartCtx, {
    type: "line",
    data: {
      labels,  // Use the day/month labels
      datasets,
    },
    options: {
      responsive: true,
      scales: {
        y: {
          beginAtZero: false,
          min: 0,
          max: 500,
        },
        x: {
          type: 'category',  // Use category scale for x-axis
          labels: labels.map(label => {
            const [day, month] = label.split('-');  // Extract day and month only
            return `${day}-${month}`;  // Display only day and month
          }),
        },
      },
    },
  });
};
*/

/*
const plotSmogCausesChart = (data) => {
  const last_year_next_two_months = data["last_year_data"]["next_two_months"];
  const last_year_past_two_months = data["last_year_data"]["past_two_months"];

  const this_year_next_two_months = data["this_year_data"]["next_two_months"];
  const this_year_past_two_months = data["this_year_data"]["past_two_months"];

  let labels = [
    ...last_year_past_two_months.date,
    ...last_year_next_two_months.date,
    ...this_year_past_two_months.date,
    ...this_year_next_two_months.date,
  ].map((dateStr) => convertDateFormat(dateStr, false));

  let datasets = [
    {
      label: "Last year",
      data: roundNullableData([
        ...last_year_past_two_months.aqi,
        ...last_year_next_two_months.aqi,
      ]),
      borderColor: "#808080",
      fill: false,
    },
    {
      label: "Current year last 2 months",
      data: roundNullableData(
        padListWithNull(
          this_year_past_two_months.aqi,
          last_year_past_two_months.date.length +
            last_year_next_two_months.date.length
        )
      ),
      borderColor: "#000000",
      fill: false,
    },
    {
      label: "Current year future 7 days",
      data: roundNullableData(
        padListWithNull(
          this_year_next_two_months.aqi.slice(0, 7),
          last_year_past_two_months.date.length +
            last_year_next_two_months.date.length +
            this_year_past_two_months.date.length
        )
      ),
      borderColor: "#8B0000",
      fill: false,
    },
    {
      label: "Current year next 7 days",
      data: roundNullableData(
        padListWithNull(
          this_year_next_two_months.aqi.slice(7, 14),
          last_year_past_two_months.date.length +
            last_year_next_two_months.date.length +
            this_year_past_two_months.date.length +
            7
        )
      ),
      borderColor: "#ff0000",
      fill: false,
    },
    {
      label: "Current year next 45 days",
      data: roundNullableData(
        padListWithNull(
          this_year_next_two_months.aqi.slice(14),
          last_year_past_two_months.date.length +
            last_year_next_two_months.date.length +
            this_year_past_two_months.date.length +
            14
        )
      ),
      borderColor: "#FF7F7F",
      fill: false,
    },
  ];

  if (predictionChart) {
    predictionChart.destroy();
  }

  predictionChart = new Chart(predictionChartCtx, {
    type: "line",
    data: {
      labels,
      datasets,
    },
    options: {
      responsive: true,
      scales: {
        y: {
          beginAtZero: false,
          min: 0,
          max: 500,
        },
        x: {
          beginAtZero: false,
        },
      },
    },
  });
};
*/
const convertDateFormat = (dateStr, shouldIncludeYear = true) => {
  const date = new Date(dateStr);

  const day = date.getDate();
  const year = shouldIncludeYear ? date.getFullYear().toString().slice(-2) : "";

  const monthNames = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "June",
    "July",
    "Aug",
    "Sept",
    "Oct",
    "Nov",
    "Dec",
  ];
  const month = monthNames[date.getMonth()];

  return `${day}-${month}${year ? `-${year}` : ""}`;
};

const padList = (list, targetLength) => {
  if (list.length >= targetLength) {
    return list;
  }
  const padding = new Array(targetLength - list.length).fill(null);
  return [...padding, ...list];
};

const padListWithNull = (list, paddingLength) => {
  const padding = new Array(paddingLength).fill(null);
  return [...padding, ...list];
};

const roundNullableData = (data) => {
  return data.map((d) => {
    if (!d) return d;
    else return Math.round(d);
  });
};
